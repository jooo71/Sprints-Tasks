
led_version1_sprint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdd  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000844  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000887  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bf  00000000  00000000  00002985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 81 00 	call	0x102	; 0x102 <main>
  74:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <appstart>:
// 		uint8_t transitions_flag = RESET_TRANSITION_FLAG;
// 		uint8_t button_state = BUTTON_RELEASED;
// 		uint8_t data = LEDS_OFF;
		/**************LED1***************/
		/*check argument*/
		LED_init(PORT_A,PIN0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 75 00 	call	0xea	; 0xea <LED_init>
		LED_init(PORT_A,PIN1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 75 00 	call	0xea	; 0xea <LED_init>
		LED_init(PORT_A,PIN2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 75 00 	call	0xea	; 0xea <LED_init>
		LED_init(PORT_A,PIN3);
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 75 00 	call	0xea	; 0xea <LED_init>
		BUTTON_init(PORT_D,PIN2);
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	0e 94 6f 00 	call	0xde	; 0xde <BUTTON_init>
		init_interrupt();
  a4:	0e 94 a5 01 	call	0x34a	; 0x34a <init_interrupt>
// 				/*DO nothing*/	
// 				break;
// 		}

	/**********interrupt*************/
	LED_on(PORT_A,PIN0);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	81 e4       	ldi	r24, 0x41	; 65
  ac:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_on>
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <appstart+0x2c>

000000b2 <__vector_1>:

	}

}
ISR(EXIT_INT_0)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	if (led_number< NUMBER_OF_PRESSED)
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	87 30       	cpi	r24, 0x07	; 7
  c4:	20 f4       	brcc	.+8      	; 0xce <__vector_1+0x1c>
	{
		led_number++;
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__vector_1+0x20>
	}
	else
	{
		led_number=0;
  ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <BUTTON_init>:

#include "button.h"

uint8_t BUTTON_init(uint8_t buttonport ,uint8_t buttonpin)
{
	int res =DIO_init(buttonport,buttonpin,IN);
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_init>
	if (res == BUTTON_ERROR_STATE)
  e4:	81 11       	cpse	r24, r1
	{
		return BUTTON_ERROR_STATE;
	}
		
	return BUTTON_SUCCESS;
  e6:	81 e0       	ldi	r24, 0x01	; 1
}
  e8:	08 95       	ret

000000ea <LED_init>:
 */ 
#include "led.h"
#include <assert.h>
uint8_t LED_init(uint8_t ledport , uint8_t ledpin)
{
	uint8_t res = DIO_init(ledport,ledpin,OUT);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_init>
	if (res == LED_STATE_ERRORSTATE)
  f0:	81 11       	cpse	r24, r1
	{
		return LED_STATE_ERRORSTATE;
	}
	return LED_STATE_SUCCESS;
  f2:	81 e0       	ldi	r24, 0x01	; 1
}
  f4:	08 95       	ret

000000f6 <LED_on>:
uint8_t LED_on(uint8_t ledport , uint8_t ledpin)
{
	uint8_t res= DIO_write(ledport,ledpin,HIGH);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	0e 94 18 01 	call	0x230	; 0x230 <DIO_write>
	if (res == LED_STATE_ERRORSTATE)
  fc:	81 11       	cpse	r24, r1
	{
		return LED_STATE_ERRORSTATE;
	}
	return LED_STATE_SUCCESS;
  fe:	81 e0       	ldi	r24, 0x01	; 1
}
 100:	08 95       	ret

00000102 <main>:

int main(void)
{
    /* Replace with your application code */
	
	appstart();
 102:	0e 94 3e 00 	call	0x7c	; 0x7c <appstart>
	
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret

0000010c <DIO_init>:
// global variable
//function definitions

uint8_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	if (pinNumber>7)
 10c:	68 30       	cpi	r22, 0x08	; 8
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_init+0x6>
 110:	83 c0       	rjmp	.+262    	; 0x218 <DIO_init+0x10c>
	{
		return DIOERRORSTATE;
	}
	else
	{
		switch(portNumber)
 112:	82 34       	cpi	r24, 0x42	; 66
 114:	49 f1       	breq	.+82     	; 0x168 <DIO_init+0x5c>
 116:	18 f4       	brcc	.+6      	; 0x11e <DIO_init+0x12>
 118:	81 34       	cpi	r24, 0x41	; 65
 11a:	41 f0       	breq	.+16     	; 0x12c <DIO_init+0x20>
 11c:	7f c0       	rjmp	.+254    	; 0x21c <DIO_init+0x110>
 11e:	83 34       	cpi	r24, 0x43	; 67
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_init+0x18>
 122:	40 c0       	rjmp	.+128    	; 0x1a4 <DIO_init+0x98>
 124:	84 34       	cpi	r24, 0x44	; 68
 126:	09 f4       	brne	.+2      	; 0x12a <DIO_init+0x1e>
 128:	5a c0       	rjmp	.+180    	; 0x1de <DIO_init+0xd2>
 12a:	78 c0       	rjmp	.+240    	; 0x21c <DIO_init+0x110>
		{
			case PORT_A:
			if (direction == IN)
 12c:	41 11       	cpse	r20, r1
 12e:	0d c0       	rjmp	.+26     	; 0x14a <DIO_init+0x3e>
			{
				DDRA &=~(1<<pinNumber);
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_init+0x30>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_init+0x2c>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	8a bb       	out	0x1a, r24	; 26
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
			case PORT_A:
			if (direction == IN)
			{
				DDRA &=~(1<<pinNumber);
			}
			else if(direction == OUT)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	09 f0       	breq	.+2      	; 0x150 <DIO_init+0x44>
 14e:	68 c0       	rjmp	.+208    	; 0x220 <DIO_init+0x114>
			{
				DDRA |=(1<<pinNumber);
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_init+0x50>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_init+0x4c>
 160:	82 2b       	or	r24, r18
 162:	8a bb       	out	0x1a, r24	; 26
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret
			{
				return DIOERRORSTATE;
			}
			break;
			case PORT_B:
			if (direction == IN)
 168:	41 11       	cpse	r20, r1
 16a:	0d c0       	rjmp	.+26     	; 0x186 <DIO_init+0x7a>
			{
				DDRB &=~(1<<pinNumber);
 16c:	27 b3       	in	r18, 0x17	; 23
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_init+0x6c>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_init+0x68>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	87 bb       	out	0x17, r24	; 23
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret
			case PORT_B:
			if (direction == IN)
			{
				DDRB &=~(1<<pinNumber);
			}
			else if(direction == OUT)
 186:	41 30       	cpi	r20, 0x01	; 1
 188:	09 f0       	breq	.+2      	; 0x18c <DIO_init+0x80>
 18a:	4c c0       	rjmp	.+152    	; 0x224 <DIO_init+0x118>
			{
				DDRB |=(1<<pinNumber);
 18c:	27 b3       	in	r18, 0x17	; 23
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_init+0x8c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_init+0x88>
 19c:	82 2b       	or	r24, r18
 19e:	87 bb       	out	0x17, r24	; 23
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
			{
				return DIOERRORSTATE;
			}
			break;
			case PORT_C:
			if (direction == IN)
 1a4:	41 11       	cpse	r20, r1
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <DIO_init+0xb6>
			{
				DDRC &=~(1<<pinNumber);
 1a8:	24 b3       	in	r18, 0x14	; 20
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_init+0xa8>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_init+0xa4>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
			case PORT_C:
			if (direction == IN)
			{
				DDRC &=~(1<<pinNumber);
			}
			else if(direction == OUT)
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	89 f5       	brne	.+98     	; 0x228 <DIO_init+0x11c>
			{
				DDRC |=(1<<pinNumber);
 1c6:	24 b3       	in	r18, 0x14	; 20
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_init+0xc6>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_init+0xc2>
 1d6:	82 2b       	or	r24, r18
 1d8:	84 bb       	out	0x14, r24	; 20
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret
			{
				return DIOERRORSTATE;
			}
			break;
			case PORT_D:
			if (direction == IN)
 1de:	41 11       	cpse	r20, r1
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <DIO_init+0xf0>
			{
				DDRD &=~(1<<pinNumber);
 1e2:	21 b3       	in	r18, 0x11	; 17
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_init+0xe2>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_init+0xde>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	81 bb       	out	0x11, r24	; 17
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
			case PORT_D:
			if (direction == IN)
			{
				DDRD &=~(1<<pinNumber);
			}
			else if(direction == OUT)
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	b1 f4       	brne	.+44     	; 0x22c <DIO_init+0x120>
			{
				DDRD |=(1<<pinNumber);
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_init+0x100>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_init+0xfc>
 210:	82 2b       	or	r24, r18
 212:	81 bb       	out	0x11, r24	; 17
			}
			break;
			default:
			return DIOERRORSTATE;
		}
		return SUCCESS;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret

uint8_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	if (pinNumber>7)
	{
		return DIOERRORSTATE;
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
			{
				return DIOERRORSTATE;
			}
			break;
			default:
			return DIOERRORSTATE;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
			{
				DDRA |=(1<<pinNumber);
			}
			else
			{
				return DIOERRORSTATE;
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
			{
				DDRB |=(1<<pinNumber);
			}
			else
			{
				return DIOERRORSTATE;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
			{
				DDRC |=(1<<pinNumber);
			}
			else
			{
				return DIOERRORSTATE;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
			{
				DDRD |=(1<<pinNumber);
			}
			else
			{
				return DIOERRORSTATE;
 22c:	80 e0       	ldi	r24, 0x00	; 0
			return DIOERRORSTATE;
		}
		return SUCCESS;
	}

}
 22e:	08 95       	ret

00000230 <DIO_write>:

uint8_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber)
 230:	82 34       	cpi	r24, 0x42	; 66
 232:	49 f1       	breq	.+82     	; 0x286 <DIO_write+0x56>
 234:	18 f4       	brcc	.+6      	; 0x23c <DIO_write+0xc>
 236:	81 34       	cpi	r24, 0x41	; 65
 238:	41 f0       	breq	.+16     	; 0x24a <DIO_write+0x1a>
 23a:	7d c0       	rjmp	.+250    	; 0x336 <DIO_write+0x106>
 23c:	83 34       	cpi	r24, 0x43	; 67
 23e:	09 f4       	brne	.+2      	; 0x242 <DIO_write+0x12>
 240:	40 c0       	rjmp	.+128    	; 0x2c2 <DIO_write+0x92>
 242:	84 34       	cpi	r24, 0x44	; 68
 244:	09 f4       	brne	.+2      	; 0x248 <DIO_write+0x18>
 246:	5a c0       	rjmp	.+180    	; 0x2fc <DIO_write+0xcc>
 248:	76 c0       	rjmp	.+236    	; 0x336 <DIO_write+0x106>
	{
		case PORT_A:
		if (value == LOW)
 24a:	41 11       	cpse	r20, r1
 24c:	0d c0       	rjmp	.+26     	; 0x268 <DIO_write+0x38>
		{
			PORTA &=~(1<<pinNumber); // write 0
 24e:	2b b3       	in	r18, 0x1b	; 27
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0x2a>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0x26>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
		case PORT_A:
		if (value == LOW)
		{
			PORTA &=~(1<<pinNumber); // write 0
		}
		else if(value == HIGH)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	09 f0       	breq	.+2      	; 0x26e <DIO_write+0x3e>
 26c:	66 c0       	rjmp	.+204    	; 0x33a <DIO_write+0x10a>
		{
			PORTA |=(1<<pinNumber); // write 1
 26e:	2b b3       	in	r18, 0x1b	; 27
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0x4a>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0x46>
 27e:	82 2b       	or	r24, r18
 280:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	08 95       	ret
		{
			return DIOERRORSTATE;
		}
		break;
		case PORT_B:
		if (value == LOW)
 286:	41 11       	cpse	r20, r1
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <DIO_write+0x74>
		{
			PORTB &=~(1<<pinNumber);
 28a:	28 b3       	in	r18, 0x18	; 24
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_write+0x66>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_write+0x62>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
		case PORT_B:
		if (value == LOW)
		{
			PORTB &=~(1<<pinNumber);
		}
		else if(value == HIGH)
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	09 f0       	breq	.+2      	; 0x2aa <DIO_write+0x7a>
 2a8:	4a c0       	rjmp	.+148    	; 0x33e <DIO_write+0x10e>
		{
			PORTB |=(1<<pinNumber);
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_write+0x86>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_write+0x82>
 2ba:	82 2b       	or	r24, r18
 2bc:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret
		{
			return DIOERRORSTATE;
		}
		break;
		case PORT_C:
		if (value == LOW)
 2c2:	41 11       	cpse	r20, r1
 2c4:	0d c0       	rjmp	.+26     	; 0x2e0 <DIO_write+0xb0>
		{
			PORTC &=~(1<<pinNumber);
 2c6:	25 b3       	in	r18, 0x15	; 21
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write+0xa2>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write+0x9e>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	08 95       	ret
		case PORT_C:
		if (value == LOW)
		{
			PORTC &=~(1<<pinNumber);
		}
		else if(value == HIGH)
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	79 f5       	brne	.+94     	; 0x342 <DIO_write+0x112>
		{
			PORTC |=(1<<pinNumber);
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_write+0xc0>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_write+0xbc>
 2f4:	82 2b       	or	r24, r18
 2f6:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	08 95       	ret
		{
			return DIOERRORSTATE;
		}
		break;
		case PORT_D:
		if (value == LOW)
 2fc:	41 11       	cpse	r20, r1
 2fe:	0d c0       	rjmp	.+26     	; 0x31a <DIO_write+0xea>
		{
			PORTD &=~(1<<pinNumber);
 300:	22 b3       	in	r18, 0x12	; 18
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_write+0xdc>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_write+0xd8>
 310:	80 95       	com	r24
 312:	82 23       	and	r24, r18
 314:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
		case PORT_D:
		if (value == LOW)
		{
			PORTD &=~(1<<pinNumber);
		}
		else if(value == HIGH)
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	a1 f4       	brne	.+40     	; 0x346 <DIO_write+0x116>
		{
			PORTD |=(1<<pinNumber);
 31e:	22 b3       	in	r18, 0x12	; 18
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_write+0xfa>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_write+0xf6>
 32e:	82 2b       	or	r24, r18
 330:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
		{
			return DIOERRORSTATE;
		}
		break;
		default:
		return DIOERRORSTATE;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
		{
			PORTA |=(1<<pinNumber); // write 1
		}
		else
		{
			return DIOERRORSTATE;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
		{
			PORTB |=(1<<pinNumber);
		}
		else
		{
			return DIOERRORSTATE;
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
		{
			PORTC |=(1<<pinNumber);
		}
		else
		{
			return DIOERRORSTATE;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
		{
			PORTD |=(1<<pinNumber);
		}
		else
		{
			return DIOERRORSTATE;
 346:	80 e0       	ldi	r24, 0x00	; 0
		default:
		return DIOERRORSTATE;

	}
	return SUCCESS;
}
 348:	08 95       	ret

0000034a <init_interrupt>:
 */ 
#include "interrupt.h"
#include "../registers.h"
void init_interrupt(void)
{
	sei();
 34a:	78 94       	sei
	MCUCR |= (1<<ISC00) |(1<<ISC01);
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	83 60       	ori	r24, 0x03	; 3
 350:	85 bf       	out	0x35, r24	; 53
	GICR |=(1<<ISC2);
 352:	8b b7       	in	r24, 0x3b	; 59
 354:	80 64       	ori	r24, 0x40	; 64
 356:	8b bf       	out	0x3b, r24	; 59
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
